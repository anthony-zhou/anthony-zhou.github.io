I"<p>Here’s how to set up a simple barcode scanning function, starting from a basic flutter app. In this tutorial we’ll be using the <a href="https://pub.dev/packages/barcode_scan">barcode_scan Flutter package</a>.</p>

<h1 id="set-up-the-configuration-files">Set up the configuration files</h1>
<p>As listed on <a href="https://pub.dev/packages/barcode_scan">this package’s post</a> on pub.dev, start by making the following changes:</p>

<h2 id="for-android">For Android:</h2>
<ol>
  <li>
    <p>Add the camera permission to your AndroidManifest.xml:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;uses-permission android:name="android.permission.CAMERA" /&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add the BarcodeScanner activity to your AndroidManifest.xml. Do NOT modify the name.</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;activity android:name="com.apptreesoftware.barcodescan.BarcodeScannerActivity"/&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>Install the Kotlin plugin for Android Studio or your default editor</p>
  </li>
  <li>
    <p>Edit your project-level build.gradle file to look like this:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   buildscript {
       ext.kotlin_version = '1.2.31'
       ...
       dependencies {
           ...
           classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
       }
   }
   ...
</code></pre></div>    </div>
  </li>
  <li>
    <p>Edit your app-level build.gradle file to look like this:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apply plugin: 'kotlin-android'
 ...
 dependencies {
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
     ...
 }
</code></pre></div>    </div>
  </li>
  <li>
    <p>In your pubspec.yaml file, add <code class="highlighter-rouge">barcode_scan: ^1.0.0</code> to the list of dependencies, as follows:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> dependencies:
   flutter:
     sdk: flutter
   # other dependencies...
   barcode_scan: ^1.0.0
</code></pre></div>    </div>

    <p>Note: for some reason many tutorials, including that of the publishers themselves, say to add <code class="highlighter-rouge">barcode_scan: ^0.0.3</code> to your pubspec.yaml file. This tends to cause problems because 0.0.3 is an unsupported version of this dependency.</p>
  </li>
  <li>
    <p>Click “Packages get” in Android Studio or run flutter packages get in your project folder.</p>
  </li>
</ol>

<h2 id="for-ios">For iOS:</h2>
<p>To use on iOS, you must add the the camera usage description to your Info.plist</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;key&gt;NSCameraUsageDescription&lt;/key&gt;
    &lt;string&gt;Camera permission is required for barcode scanning.&lt;/string&gt;
</code></pre></div></div>

<h1 id="write-the-testing-code">Write the testing code</h1>
<p>The package barcode_scan should now be successfully installed and configured in your flutter application. Now all that remains is to use the package in your app!</p>

<p>Outside of the formatting, the key to this example is the call to <code class="highlighter-rouge">BarcodeScanner.scan()</code>, which uses the imported package <code class="highlighter-rouge">barcode_scan</code>.</p>

<h2 id="completed-code-in-maindart">Completed code in main.dart</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import 'dart:async';
import 'package:barcode_scan/barcode_scan.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

void main() {
  runApp(new MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; new _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  String barcode = "";

  @override
  initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return new MaterialApp(
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
          appBar: AppBar(
            title: Text('Barcode Scanner Example'),
          ),
          body: Center(
            child: Column(
              children: &lt;Widget&gt;[
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text("Press the button to scan an item:"),
                ),
                Container(
                  child: RaisedButton(onPressed: scan, child: Text("Scan")),
                  padding: const EdgeInsets.all(8.0),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text(barcode),
                ),
              ],
            ),
          )),
    );
  }

  //scan a barcode, store result in this.barcode
  Future scan() async {
    try {
      //use barcode_scan to scan the barcode
      String barcode = await BarcodeScanner.scan();

      //if the barcode has been obtained, display it
      if (barcode.length &gt; 0)
        setState(
            () =&gt; this.barcode = "The barcode you scanned was: " + barcode);
    } on PlatformException catch (e) {
      if (e.code == BarcodeScanner.CameraAccessDenied) {
        setState(() {
          this.barcode = 'Camera permission was not granted';
        });
      } else {
        setState(() =&gt; this.barcode = 'Unknown error: $e');
      }
    } on FormatException {
      //the user probably just pressed the back button, no need to print an error message
      setState(() =&gt; this.barcode = '');
    } catch (e) {
      setState(() =&gt; this.barcode = 'Unknown error: $e');
    }
  }
}
</code></pre></div></div>
:ET